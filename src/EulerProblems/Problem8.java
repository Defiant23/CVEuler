package EulerProblems;


/**
 * Created by cvalencia on 6/7/16.
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

 73167176531330624919225119674426574742355349194934
 96983520312774506326239578318016984801869478851843
 85861560789112949495459501737958331952853208805511
 12540698747158523863050715693290963295227443043557
 66896648950445244523161731856403098711121722383113
 62229893423380308135336276614282806444486645238749
 30358907296290491560440772390713810515859307960866
 70172427121883998797908792274921901699720888093776
 65727333001053367881220235421809751254540594752243
 52584907711670556013604839586446706324415722155397
 53697817977846174064955149290862569321978468622482
 83972241375657056057490261407972968652414535100474
 82166370484403199890008895243450658541227588666881
 16427171479924442928230863465674813919123162824586
 17866458359124566529476545682848912883142607690042
 24219022671055626321111109370544217506941658960408
 07198403850962455444362981230987879927244284909188
 84580156166097919133875499200524063689912560717606
 05886116467109405077541002256983155200055935729725
 71636269561882670428252483600823257530420752963450

 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
public class Problem8 {

    private static final String seq = "73167176531330624919225119674426574742355349194934" +
            "96983520312774506326239578318016984801869478851843" +
            "85861560789112949495459501737958331952853208805511" +
            "12540698747158523863050715693290963295227443043557" +
            "66896648950445244523161731856403098711121722383113" +
            "62229893423380308135336276614282806444486645238749" +
            "30358907296290491560440772390713810515859307960866" +
            "70172427121883998797908792274921901699720888093776" +
            "65727333001053367881220235421809751254540594752243" +
            "52584907711670556013604839586446706324415722155397" +
            "53697817977846174064955149290862569321978468622482" +
            "83972241375657056057490261407972968652414535100474" +
            "82166370484403199890008895243450658541227588666881" +
            "16427171479924442928230863465674813919123162824586" +
            "17866458359124566529476545682848912883142607690042" +
            "24219022671055626321111109370544217506941658960408" +
            "07198403850962455444362981230987879927244284909188" +
            "84580156166097919133875499200524063689912560717606" +
            "05886116467109405077541002256983155200055935729725" +
            "71636269561882670428252483600823257530420752963450";

    private static long highTotal;
    private static String highSub;
    private static String sub;



    //New thought. Break seq into 13 character substring, test substring for new max, if max, save substring and max. Increment by 1.
    //Additional thought to save runtime, cut up first substring, then divide from that substring the first character in the seq and multiply by the next (14th)
    // ^^ This will make it so you're not testing, cutting, testing, updating, cutting, testing, etc..
    public static void main (String args[]){
        long total = 1;
        for(int i = 0; i < 13; i++) {
//            System.out.println(seq.charAt(i));
            total = total * Integer.parseInt(Character.toString(seq.charAt(i)));
//            System.out.println("Total: " + total);
        }

        highTotal = total;
        highSub = seq.substring(0, 13);
        sub = seq.substring(0,13);

        //Problem: check for 0s
        for (int i = 13; i < seq.length(); i++) {
            int out = Integer.valueOf(Character.toString(sub.charAt(0)));
            int in = Integer.valueOf(Character.toString(seq.charAt(i)));
            total = (total * in) /out;
            sub = sub.substring(1) + seq.charAt(i);
            System.out.println(out);
            System.out.println(sub);
            System.out.println(total);
            System.out.println(in);
            //if ()
        }
    }
}
